Αντώνης Καλαμάκης
SDI1800056

g++ -std=c++11 -o main main.cpp classes.cpp data_arrays.cpp
./main

<README FROM ASK1>
Στην class Date:
Έχω δυο constructor έναν με αρχικοποίηση των μεταβλητών d,m,y και έναν  για να μπορώ να έχω
στις άλλες class δεδομένα τύπου class date και να μη χρειάζεται να δεσμεύσω μνήμη στον heap.

Στην class Post:
Constructor με αρχικοποίηση για όλα τα δεδομένα του, αντιγράφω τα κειμενα(title, creator, text)
επίσης αντιγράφω το Date απο το όρισμα, στο Date του Post και εκτυπώνω τα μηνύματα.

Την Post::Post_return_ID χρησιμοποιώ για να ψάξω ένα συγκεκριμένο post σε ένα συγκεκριμένο Thread.


Στην class Thread:
Τα στοιχειά του class Thread είναι τα string και η Date που ζητάει η άσκηση και έναν πινάκα από
Post* τα οποία αρχικοποιουνται και αποθηκεύονται στην heap στον constructor.
Ο Constructor αρχικοποιεί τα δεδομένα του Thread από τα δεδομένα των ορισμάτων
και φτιάχνει έναν πίνακα από posts στον heap με πλήθος pl_post και τα αρχικοποιεί.

Ο Destructor αποδεσμεύει τα "κείμενα" και τον πίνακα.

Την Thread::Thread_get_Subject την χρησιμοποιώ όταν εκτυπώνω το forum(εκτυπώνει μόνο το Subject των Thread).

Την Thread::Thread_print_posts την χρησιμοποιώ όταν θέλω να εκτυπώσω ένα συγκεκριμένο thread(δηλαδή και τα post του).

Η Thread::Thread_search_post είναι υπόσυνάρτηση της Forum::Forum_search_post και δημιουργήθηκε για πιο καθαρό κώδικα.

Η Thread::Thread_print_post εκτυπώνει ένα συγκεκριμένο post με θέση z στην πίνακα των post του Thread.

Στην class Forum:
Τα στοιχειά του class Forum είναι αυτά που ζητάει η άσκηση και έναν πινάκα από Thread* οι οποίοι αρχικοποιουνται
και αποθηκεύονται στην μνήμη heap κατά την εκτέλεση του constructor.
Ο Constructor αρχικοποιείται δεδομένα του Forum και φτιάχνω μια λίστα με Threads, το πρώτο thread
είναι "Κανόνες και χρήσιμες πληροφορίες"(από εκφώνηση) και τα υπόλοιπα δημιουργούνται και αρχικοποιούνται
με τυχαία κείμενα από το data_arrays.cpp, το default πλήθος των post είναι 5 αλλά μπορεί να αλλάξει προσθέτοντας
μία ακόμα παράμετρο int, κατά την αρχικοποίηση των thread.
Για το πλήθος των Thread το default όρισμα είναι 5 αλλά μπορεί να αλλάξει στην main κατά τη δημιουργία του Forum.

Η Forum::Forum_print εκτυπώνει τους τίτλους των Thread του Forum.

Η Forum::Forum_print_thread εκτυπώνει τις πληροφορίες και τα post ενός συγκεκριμένου thread με Subject, Subjectt(από το ορισμα).

Η Forum::Forum_search_post ψάχνει και εκτυπώνει ένα post με ID, x(από ορισμα) σε οποιοδήποτε thread
αν το βρει το εκτυπώνει αλλιώς εκτυπώνει Post not found.

Η global μεταβλητή χρησιμοποιείται για την αναπαράσταση του ID των post και μεταφερετε και στα υπολοιπα αρχεια.
</README FROM ASK1>



<ASK2>
Στην class Post:
Η Post::Post_get_post_creator επιστρέφει τον δημιουργό του Post, την χρησιμοποιώ για να
προσθέσω αν χρειάζεται node στο δέντρο με βάση αυτό το όνομα.

Στην class Thread:
Η Thread::Thread_get_posts επιστρέφει τον πινάκα από Posts που υπάρχουν στα Threads,

και η Thread::Thread_get_pl_post επιστρέφει το πλήθος από Post που έχει το συγκεκριμένο Thread.

Στην class List:
Έχω φτιάξει ένα struct List_node το οποίο ουσιαστικά είναι οι κόμβοι της λίστας μου
και έχουν ως στοιχειά ένα δείκτη σε ένα Post και τον δείκτη του επόμενου κόμβου της λίστας
οι συναρτήσεις για την διεπαφή και την χρήση της λίστας είναι στο private κομμάτι της class

Αρχικά υπάρχει ένα στοιχειό ListPtr που είναι ο πρώτος κόμβος της λίστας.

List_create αρχικοποιει τον δείκτη της list_node με NULL,
η List_empty ελέγχει αν είναι κενή ή όχι η λίστα,
η List_insert παίρνει ως δεύτερο όρισμα μια αναφορά σε ένα Post και προσθέτει το Post
στην λίστα,
η List print all εκτυπώνει με την βοήθεια της print data όλα τα στοιχειά της λίστας μέχρι το τέλος της,
η List destruct διαγραφεί όλους τους κόμβους της λίστας από την μνήμη heap,
και η List_combine παίρνει ως δεύτερο όρισμα έναν δείκτη σε ένα list_node μιας δεύτερης λίστας,
και προσθέτει τα στοιχειά της δεύτερης στην πρώτη με την χρήση της List_insert.

Στο public κομμάτι της class List:
Υπάρχει ένας constructor που καλεί την List_create για να αρχικοποιηθει η λίστα,
οι συναρτήσεις χρησιμοποιούνται για να μπορώ να καλέσω κάποιες συναρτήσεις και από έκτος το scope,
της class List(επίσης για ποιο καθαρό κώδικα).

Στην class Tree:
Στο struct Tree_node έχω τους κόμβους του δένδρου και στο private κομμάτι της class Tree έχω
την διεπαφή του για την χρήση από τις public συναρτήσεις της class tree.

Το στοιχειό της class Tree που είναι TreePtr είναι η ριζά του δένδρου.

η Tree_create αρχικοποιει με NULL το δένδρο,
η Tree_empty ελέγχει αν το δένδρο είναι άδειο,
η Tree_insert με όρισμα Post ελέγχει το αν πρέπει να δημιουργήσει(και αν ναι που) έναν νέο κόμβο για το δένδρο και να προσθέσει
στην λίστα του κόμβου αυτού το νέο Post ή να προσθέσει σε έναν ήδη υπάρχον κόμβο ένα νέο Post στην λίστα του,
η Tree_insert με όρισμα List κάνει ότι η παραπάνω αλλά αντί για post προσθέτει μια ολόκληρη λίστα με Post(s) από ένα άλλο δένδρο,
η Tree_print_all εκτυπώνει με την βοήθεια της Tree_print_data τους κόμβους(ονόματα + λίστες) του δένδρου,
η Tree_destruct αποδεσμεύει το δένδρο(και τις λίστες κάθε κόμβου) από την heap μνήμη,
και η Tree_add_tree προσθέτει τα στοιχειά ενός δένδρου, που παίρνει από όρισμα, στο δένδρο.

Στο public κομμάτι της class Tree:
Υπάρχει ένας constructor που παίρνει ως όρισμα ένα Thread και παίρνει τους δημιουργούς των Post και τα Post του και τα προσθέτει στο δένδρο
και υπάρχει και ένας copy constructor ο οποίος παίρνει ως όρισμα ένα άλλο δένδρο και φτιάχνει ένα αντίγραφο του δένδρου που πήρε ως όρισμα.

O Destructor καλεί την Tree_destruct και αποδεσμεύει από την μνήμη heap,
η Tree_print εκτυπώνει το δένδρο καλώντας την Tree_print_all,
η Tree_enchance συγχωνεύει δυο δένδρα, ένα από το οποίο καλείται η συνάρτηση και ένα που το παίρνει ως όρισμα.

Στην class Forum:
Έχει προστεθεί ένα ακόμα στοιχειό στο private κομμάτι, ένας πινάκας από Tree* τα οποία είναι δένδρα από κάθε Thread.

Η συνάρτηση Forum_print_sorted εκτυπώνει το Forum αλφαβητικά με βάση τους creators και εκτυπώνει για κάθε creator
τα Post που έχει γράψει, δημιουργεί ένα temp δένδρο το οποίο αρχικοποιειται με το δένδρο του πρώτου Thread, μέσα σε μια
for προσθέτει με την χρήση της συνάρτησης Tree_enchance τα υπόλοιπα δένδρα και τέλος το Εκτυπώνει και το διαγράφει αυτόματα
επειδή τελειώνει η συνάρτηση και δεν υπάρχει τίποτα αποθηκευμένο στην μνήμη heap.

Το κομμάτι της Άσκησης 2 είναι στο <ASK2> </ASK2> μέρος του output του προγράμματος όπου καλείται η Forum_print_sorted.

Στο αρχείο data_arrays.cpp, στην συνάρτηση get_random_name έχω βάλει να παίρνει τιμές έως 5 για να υπάρχει μεγάλη πιθανότητα να επιλεχτεί ο ίδιος
creator πάνω από μια φορά(το μαξ είναι 40 αφού 40 είναι και τα ονόματα στο name_array).
</ASK2>
